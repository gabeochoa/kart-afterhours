diff a/src/log/log.h b/src/log/log.h	(rejected hunks)
@@ -15,6 +15,9 @@
 
 #include "log_level.h"
 
+#include <fmt/format.h>
+#include <fmt/std.h>
+
 #ifndef AFTER_HOURS_LOG_LEVEL
 #define AFTER_HOURS_LOG_LEVEL LogLevel::LOG_INFO
 #endif
@@ -47,35 +50,18 @@ inline void vlog(LogLevel level, const char *file, int line,
     file_info = "";
   }
 
-  const std::string_view color_start = level >= LogLevel::LOG_WARN //
-                                           ? color_red
-                                           : color_white;
+  const std::string_view color_start = level >= LogLevel::LOG_WARN ? color_red
+                                                                   : color_white;
 
   const auto message = fmt::vformat(format, args);
   const auto full_output = fmt::format("{}{}", file_info, message);
-  fmt::print("{}{}{}", color_start, full_output, color_reset);
-  fmt::print("\n");
-}
-
-template <typename... Args>
-inline void log_me(LogLevel level, const char *file, int line,
-                   const char *format, Args &&...args) {
-  vlog(level, file, line, format,
-       fmt::make_args_checked<Args...>(format, args...));
+  fmt::print("{}{}{}\n", color_start, full_output, color_reset);
 }
 
 template <typename... Args>
 inline void log_me(LogLevel level, const char *file, int line,
-                   const wchar_t *format, Args &&...args) {
-  vlog(level, file, line, format,
-       fmt::make_args_checked<Args...>(format, args...));
-}
-
-template <>
-inline void log_me(LogLevel level, const char *file, int line,
-                   const char *format, const char *&&args) {
-  vlog(level, file, line, format,
-       fmt::make_args_checked<const char *>(format, args));
+                   fmt::format_string<Args...> format, Args const &...args) {
+  vlog(level, file, line, format, fmt::make_format_args(args...));
 }
 
 // Thread-safe storage for log_once_per timing
@@ -87,20 +73,17 @@ static std::mutex log_once_per_mutex;
 
 template <typename Level, typename... Args>
 inline void log_once_per(std::chrono::milliseconds interval, Level level,
-                         const char *file, int line, const char *format,
-                         Args &&...args) {
+                         const char *file, int line, fmt::format_string<Args...> format,
+                         Args const &...args) {
   if (static_cast<int>(level) < static_cast<int>(AFTER_HOURS_LOG_LEVEL))
     return;
-  // Create a unique key for this log message
-  std::string key = fmt::format("{}:{}:{}", file, line, format);
+  std::string key = fmt::format("{}:{}", file, line);
   {
     std::lock_guard<std::mutex> lock(log_once_per_mutex);
     auto now = std::chrono::steady_clock::now();
     auto it = log_once_per_timestamps.find(key);
     if (it == log_once_per_timestamps.end() || (now - it->second) >= interval) {
-      // Log the message and update timestamp
-      log_me(static_cast<LogLevel>(level), file, line, format,
-             std::forward<Args>(args)...);
+      log_me(static_cast<LogLevel>(level), file, line, format, args...);
       log_once_per_timestamps[key] = now;
     }
   }
