diff a/src/rl.h b/src/rl.h	(rejected hunks)
@@ -40,29 +40,33 @@ namespace raylib {
 #include <rlgl.h>
 #endif
 
-// Only add missing scalar-left multiplication overloads
+inline Vector2 operator+(Vector2 a, Vector2 b) { return Vector2Add(a, b); }
+inline Vector3 operator+(Vector3 a, Vector3 b) { return Vector3Add(a, b); }
+inline Vector2 operator-(Vector2 a, Vector2 b) { return Vector2Subtract(a, b); }
+inline Vector3 operator-(Vector3 a, Vector3 b) { return Vector3Subtract(a, b); }
+
 inline Vector2 operator*(float s, Vector2 a) { return Vector2Scale(a, s); }
 inline Vector3 operator*(float s, Vector3 a) { return Vector3Scale(a, s); }
-
-inline void DrawSplineSegmentLinear(Vector2 p1, Vector2 p2, float thick,
-                                    Color color) {
-  // NOTE: For the linear spline we don't use subdivisions, just a single quad
-
-  Vector2 delta = {p2.x - p1.x, p2.y - p1.y};
-  float length = sqrtf(delta.x * delta.x + delta.y * delta.y);
-
-  if ((length > 0) && (thick > 0)) {
-    float scale = thick / (2 * length);
-
-    Vector2 radius = {-scale * delta.y, scale * delta.x};
-    Vector2 strip[4] = {{p1.x - radius.x, p1.y - radius.y},
-                        {p1.x + radius.x, p1.y + radius.y},
-                        {p2.x - radius.x, p2.y - radius.y},
-                        {p2.x + radius.x, p2.y + radius.y}};
-
-    DrawTriangleStrip(strip, 4, color);
-  }
+inline Vector2 operator*(Vector2 a, float s) { return Vector2Scale(a, s); }
+inline Vector3 operator*(Vector3 a, float s) { return Vector3Scale(a, s); }
+inline Vector2 &operator+=(Vector2 &a, const Vector2 &b) {
+  a = Vector2Add(a, b);
+  return a;
+}
+inline Vector3 &operator+=(Vector3 &a, const Vector3 &b) {
+  a = Vector3Add(a, b);
+  return a;
+}
+inline Vector2 &operator-=(Vector2 &a, const Vector2 &b) {
+  a = Vector2Subtract(a, b);
+  return a;
+}
+inline Vector3 &operator-=(Vector3 &a, const Vector3 &b) {
+  a = Vector3Subtract(a, b);
+  return a;
 }
+inline Vector2 operator/(Vector2 a, float s) { return Vector2Scale(a, 1.0f / s); }
+inline Vector3 operator/(Vector3 a, float s) { return Vector3Scale(a, 1.0f / s); }
 
 inline void DrawSplineLinear(const Vector2 *points, int pointCount, float thick,
                              Color color) {
@@ -71,7 +75,7 @@ inline void DrawSplineLinear(const Vector2 *points, int pointCount, float thick,
 
 #if defined(SUPPORT_SPLINE_MITERS)
   Vector2 prevNormal =
-      (Vector2){-(points[1].y - points[0].y), (points[1].x - points[0].x)};
+      Vector2{-(points[1].y - points[0].y), (points[1].x - points[0].x)};
   float prevLength =
       sqrtf(prevNormal.x * prevNormal.x + prevNormal.y * prevNormal.y);
 
@@ -83,14 +87,14 @@ inline void DrawSplineLinear(const Vector2 *points, int pointCount, float thick,
     prevNormal.y = 0.0f;
   }
 
-  Vector2 prevRadius = {0.5f * thick * prevNormal.x,
+  Vector2 prevRadius = Vector2{0.5f * thick * prevNormal.x,
                         0.5f * thick * prevNormal.y};
 
   for (int i = 0; i < pointCount - 1; i++) {
-    Vector2 normal = {0};
+    Vector2 normal = Vector2{0.0f, 0.0f};
 
     if (i < pointCount - 2) {
-      normal = (Vector2){-(points[i + 2].y - points[i + 1].y),
+      normal = Vector2{-(points[i + 2].y - points[i + 1].y),
                          (points[i + 2].x - points[i + 1].x)};
       float normalLength = sqrtf(normal.x * normal.x + normal.y * normal.y);
 
@@ -105,7 +109,7 @@ inline void DrawSplineLinear(const Vector2 *points, int pointCount, float thick,
       normal = prevNormal;
     }
 
-    Vector2 radius = {prevNormal.x + normal.x, prevNormal.y + normal.y};
+    Vector2 radius = Vector2{prevNormal.x + normal.x, prevNormal.y + normal.y};
     float radiusLength = sqrtf(radius.x * radius.x + radius.y * radius.y);
 
     if (radiusLength > 0.0f) {
@@ -127,10 +131,10 @@ inline void DrawSplineLinear(const Vector2 *points, int pointCount, float thick,
     }
 
     Vector2 strip[4] = {
-        {points[i].x - prevRadius.x, points[i].y - prevRadius.y},
-        {points[i].x + prevRadius.x, points[i].y + prevRadius.y},
-        {points[i + 1].x - radius.x, points[i + 1].y - radius.y},
-        {points[i + 1].x + radius.x, points[i + 1].y + radius.y}};
+        Vector2{points[i].x - prevRadius.x, points[i].y - prevRadius.y},
+        Vector2{points[i].x + prevRadius.x, points[i].y + prevRadius.y},
+        Vector2{points[i + 1].x - radius.x, points[i + 1].y - radius.y},
+        Vector2{points[i + 1].x + radius.x, points[i + 1].y + radius.y}};
 
     DrawTriangleStrip(strip, 4, color);
 
@@ -140,23 +144,23 @@ inline void DrawSplineLinear(const Vector2 *points, int pointCount, float thick,
 
 #else // !SUPPORT_SPLINE_MITERS
 
-  Vector2 delta = {0};
+  Vector2 delta = Vector2{0.0f, 0.0f};
   float scale = 0.0f;
 
   for (int i = 0; i < pointCount - 1; i++) {
     delta =
-        (Vector2){points[i + 1].x - points[i].x, points[i + 1].y - points[i].y};
+        Vector2{points[i + 1].x - points[i].x, points[i + 1].y - points[i].y};
     float length = sqrtf(delta.x * delta.x + delta.y * delta.y);
 
     if (length > 0)
       scale = thick / (2 * length);
 
-    Vector2 radius = {-scale * delta.y, scale * delta.x};
+    Vector2 radius = Vector2{-scale * delta.y, scale * delta.x};
     Vector2 strip[4] = {
-        {points[i].x - radius.x, points[i].y - radius.y},
-        {points[i].x + radius.x, points[i].y + radius.y},
-        {points[i + 1].x - radius.x, points[i + 1].y - radius.y},
-        {points[i + 1].x + radius.x, points[i + 1].y + radius.y}};
+        Vector2{points[i].x - radius.x, points[i].y - radius.y},
+        Vector2{points[i].x + radius.x, points[i].y + radius.y},
+        Vector2{points[i + 1].x - radius.x, points[i + 1].y - radius.y},
+        Vector2{points[i + 1].x + radius.x, points[i + 1].y + radius.y}};
 
     DrawTriangleStrip(strip, 4, color);
   }
